
ATmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ea  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000257  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000011b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000015cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 80 00 	call	0x100	; 0x100 <main>
  88:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
// Variable para almacenar el estado del botón
volatile uint8_t estadoBoton = 0;

void setup() {
	// Configura el pin del botón como entrada con resistencia Pull-Up
	DDRD &= ~(1 << BOTON_PIN);  // Configura el pin como entrada
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8f 7e       	andi	r24, 0xEF	; 239
  94:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BOTON_PIN);  // Habilita la resistencia Pull-Up
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	8b b9       	out	0x0b, r24	; 11

	// Configura el pin PB5 (LED integrado en el ATmega328P) como salida
	DDRB |= (1 << PB5);
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	84 b9       	out	0x04, r24	; 4

	// Habilitar las interrupciones por cambio de estado para el pin PD4
	PCICR |= (1 << PCIE2);  // Habilita las interrupciones por cambio de estado para PCINT[23:16] (PORTD)
  a2:	e8 e6       	ldi	r30, 0x68	; 104
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT20);  // Habilita la interrupción en el pin PD4
  ac:	ed e6       	ldi	r30, 0x6D	; 109
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 61       	ori	r24, 0x10	; 16
  b4:	80 83       	st	Z, r24

	// Habilitar interrupciones globales
	sei();
  b6:	78 94       	sei
  b8:	08 95       	ret

000000ba <loop>:
}

void loop() {
	// Controla el LED según el estado del botón
	if (estadoBoton) {
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  be:	88 23       	and	r24, r24
  c0:	21 f0       	breq	.+8      	; 0xca <loop+0x10>
		PORTB |= (1 << PB5);  // Enciende el LED si el botón está en HIGH
  c2:	85 b1       	in	r24, 0x05	; 5
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	85 b9       	out	0x05, r24	; 5
  c8:	08 95       	ret
		} else {
		PORTB &= ~(1 << PB5);  // Apaga el LED si el botón está en LOW
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	8f 7d       	andi	r24, 0xDF	; 223
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	08 95       	ret

000000d2 <__vector_5>:
	}
}

// Esta es la rutina de servicio de interrupción para los pines de PORTD (pines D0 a D7)
ISR(PCINT2_vect) {
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	// Detecta el cambio de estado en el pin PD4
	if (!(PIND & (1 << BOTON_PIN))) {
  e0:	4c 99       	sbic	0x09, 4	; 9
  e2:	07 c0       	rjmp	.+14     	; 0xf2 <__vector_5+0x20>
		estadoBoton = !estadoBoton;  // Cambia el estado del botón
  e4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	91 11       	cpse	r25, r1
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:

int main(void) {
	setup();
 100:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	while (1) {
		loop();
 104:	0e 94 5d 00 	call	0xba	; 0xba <loop>
 108:	fd cf       	rjmp	.-6      	; 0x104 <main+0x4>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
